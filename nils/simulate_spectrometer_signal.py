#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Nov 20 14:40:06 2019
Function to simulate the measured formfactor of the spectrometer for input of
s (m) and I (amps)

@author: lockmann
"""
import matplotlib.pylab as plt
import numpy as np

"""
simulate spectrometer
"""


def get_crisp_signal(s, current, n_shots=1, which_set="high"):
    """Simulates the signal of the spectrometer of a single shot including the
    noise of the spectrometer.

    Parameters
    ----------
    s :         numpy array of floats
                longitudinal bunch coordinate.
    current :   numpy array of floats with same length as s
                current in ampere
    n_shots:    int, optional
                number of shots to average from. Reduces spectrometer noise.
    which_set:  str, optional
                Specifies the grating set of the spectrometer to use. Keep in
                mind that experimentally you can only get one at a time.
                Keywords are: 'high', 'low' and 'both'

    Returns
    ------
    results :   float (array)
                resulting electric field at distance r
    """
    # center s so that 0 is in the middle
    s_centered = s - np.sum(s * current) / np.sum(current)
    # get charge
    t_in = s_centered / 3e8
    charge = np.trapz(current, x=t_in)
    # linear time spacing
    t_spec = np.arange(-2, 2, 0.001) * 1e-12
    # needs to be sorted
    current = current[np.argsort(t_in)]
    t_in = np.sort(t_in)
    cur_spec = np.interp(t_spec, t_in, current, left=0, right=0)
    # normalize to one
    cur_spec = cur_spec / np.trapz(cur_spec, x=t_spec)

    # plt.figure('Normalized and intrapolated')
    # plt.plot(t_spec*1e15,cur_spec*1e-3)

    # fft
    comp_ff = np.fft.fft(cur_spec)
    scale_factor = t_spec[1] - t_spec[0]
    comp_ff = comp_ff * scale_factor
    freqs = np.fft.fftfreq(np.size(cur_spec), t_spec[1] - t_spec[0])
    comp_ff = comp_ff[freqs >= 0]
    freqs = freqs[freqs >= 0]

    # plt.figure()
    # plt.plot(freqs*1e-12,np.abs(comp_ff))
    # plt.xscale('log')
    # plt.yscale('log')

    # interpolate to spectrometer range
    freqs_spectrometer = np.array(
        [
            6.84283010e11,
            6.86342276e11,
            6.89291238e11,
            6.93231268e11,
            6.97867818e11,
            7.03183896e11,
            7.09148197e11,
            7.15734438e11,
            7.23107481e11,
            7.31240520e11,
            7.40197234e11,
            7.50015830e11,
            7.60740352e11,
            7.72411055e11,
            7.85016183e11,
            7.98657943e11,
            8.13405379e11,
            8.29377459e11,
            8.46469777e11,
            8.65200287e11,
            8.85430610e11,
            9.07299763e11,
            9.31292658e11,
            9.57343678e11,
            9.85437362e11,
            1.01603519e12,
            1.04944212e12,
            1.08594355e12,
            1.12511418e12,
            1.16825162e12,
            1.25452235e12,
            1.25941010e12,
            1.26511563e12,
            1.27198544e12,
            1.28040955e12,
            1.29006363e12,
            1.30097204e12,
            1.31295400e12,
            1.32651050e12,
            1.34139271e12,
            1.35760346e12,
            1.37547358e12,
            1.39503008e12,
            1.41656334e12,
            1.43974321e12,
            1.46457178e12,
            1.49167731e12,
            1.52101420e12,
            1.55222847e12,
            1.58655331e12,
            1.62359096e12,
            1.66369362e12,
            1.70718601e12,
            1.75508152e12,
            1.80652971e12,
            1.86252358e12,
            1.92362000e12,
            1.99001009e12,
            2.06242973e12,
            2.14196419e12,
            2.28119024e12,
            2.28903842e12,
            2.29950939e12,
            2.31261258e12,
            2.32772918e12,
            2.34515972e12,
            2.36498904e12,
            2.38681143e12,
            2.41113054e12,
            2.43827617e12,
            2.46831212e12,
            2.50106736e12,
            2.53639935e12,
            2.57499338e12,
            2.61694409e12,
            2.66265777e12,
            2.71189970e12,
            2.76495993e12,
            2.82181770e12,
            2.88430880e12,
            2.95157763e12,
            3.02570939e12,
            3.10515027e12,
            3.19080363e12,
            3.28411150e12,
            3.38505628e12,
            3.49557917e12,
            3.61569473e12,
            3.74494818e12,
            3.87221178e12,
            3.87605079e12,
            3.89182771e12,
            3.91112792e12,
            3.93302151e12,
            3.95880137e12,
            3.98757241e12,
            4.02090481e12,
            4.05868059e12,
            4.09887219e12,
            4.14427297e12,
            4.19590008e12,
            4.25159913e12,
            4.31184945e12,
            4.37798056e12,
            4.45017789e12,
            4.52767991e12,
            4.61054903e12,
            4.70100308e12,
            4.79815306e12,
            4.90363011e12,
            5.01847576e12,
            5.14289228e12,
            5.27853835e12,
            5.42497233e12,
            5.58394521e12,
            5.75566213e12,
            5.94270061e12,
            6.14675659e12,
            6.36808841e12,
            6.60398418e12,
            6.84239080e12,
            6.86645607e12,
            6.89844358e12,
            6.93795435e12,
            6.98381615e12,
            7.03665301e12,
            7.09581595e12,
            7.16182658e12,
            7.23558808e12,
            7.31656935e12,
            7.40588391e12,
            7.50366620e12,
            7.61017924e12,
            7.72725265e12,
            7.85313450e12,
            7.98952729e12,
            8.13636493e12,
            8.29743559e12,
            8.46741872e12,
            8.65427554e12,
            8.85635877e12,
            9.07462058e12,
            9.31463114e12,
            9.57583282e12,
            9.85392517e12,
            1.01581001e13,
            1.04872716e13,
            1.08470040e13,
            1.12261054e13,
            1.13980414e13,
            1.14448608e13,
            1.15007118e13,
            1.15668861e13,
            1.16436805e13,
            1.16745582e13,
            1.17301474e13,
            1.18286343e13,
            1.19375252e13,
            1.20584689e13,
            1.21926665e13,
            1.23420542e13,
            1.25037214e13,
            1.26827481e13,
            1.28758007e13,
            1.30836435e13,
            1.33098200e13,
            1.35576821e13,
            1.38245741e13,
            1.41103234e13,
            1.44217346e13,
            1.47624195e13,
            1.51316322e13,
            1.55258557e13,
            1.59552050e13,
            1.64196917e13,
            1.69285923e13,
            1.74782780e13,
            1.80802622e13,
            1.87316513e13,
            1.94415752e13,
            2.05304449e13,
            2.06041596e13,
            2.06980683e13,
            2.08140040e13,
            2.09510109e13,
            2.11093505e13,
            2.12864874e13,
            2.14804199e13,
            2.17008944e13,
            2.19489705e13,
            2.22216055e13,
            2.25161992e13,
            2.28301018e13,
            2.31801788e13,
            2.35588868e13,
            2.39691136e13,
            2.44111492e13,
            2.48897567e13,
            2.54005500e13,
            2.59618741e13,
            2.65693466e13,
            2.72227653e13,
            2.79406515e13,
            2.87222610e13,
            2.95520370e13,
            3.04799241e13,
            3.14692524e13,
            3.25463980e13,
            3.36766529e13,
            3.41763020e13,
            3.43153008e13,
            3.44839431e13,
            3.46803032e13,
            3.49137251e13,
            3.49825754e13,
            3.51760204e13,
            3.54682908e13,
            3.57958567e13,
            3.61610300e13,
            3.65661507e13,
            3.70094847e13,
            3.74942425e13,
            3.80275217e13,
            3.86055890e13,
            3.92357545e13,
            3.99218111e13,
            4.06583840e13,
            4.14533934e13,
            4.23052569e13,
            4.32362878e13,
            4.42368558e13,
            4.53735986e13,
            4.65444168e13,
            4.78371060e13,
            4.92264177e13,
            5.07656062e13,
            5.24232320e13,
            5.41042876e13,
            5.61221152e13,
            5.82673400e13,
        ]
    )

    ff_spectrometer = np.interp(freqs_spectrometer, freqs, np.abs(comp_ff))

    # plt.figure('Spectrometer Signal')
    # plt.plot(freqs_spectrometer*1e-12, ff_spectrometer, 'o')
    # plt.xscale('log')
    # plt.yscale('log')

    # add spectrometer noise
    # response in V/nCÂ²
    spec_response = np.array(
        [
            2.27139720e-02,
            2.63574891e-02,
            1.91519673e-02,
            2.68880698e-02,
            2.96823444e-02,
            2.50777417e-02,
            5.14215877e-02,
            3.65048653e-02,
            5.01399530e-02,
            4.92891672e-02,
            6.28404705e-02,
            5.90190272e-02,
            7.09957402e-02,
            9.88634708e-02,
            1.14630994e-01,
            1.23265766e-02,
            1.23461331e-01,
            1.36320335e-01,
            1.25770119e-01,
            1.32215392e-01,
            1.36440279e-01,
            1.34883965e-01,
            1.31848572e-01,
            1.64531877e-01,
            1.55915488e-01,
            1.92955737e-01,
            2.10324614e-01,
            2.06284403e-01,
            1.21629041e-01,
            1.28159124e-01,
            2.82388474e-02,
            3.24896486e-02,
            6.32553505e-02,
            7.70183540e-02,
            8.65472943e-02,
            1.15282182e-01,
            1.20753130e-01,
            1.58432901e-01,
            1.75611721e-01,
            1.91465810e-01,
            2.57557223e-01,
            2.96939075e-01,
            3.14254548e-01,
            3.66881036e-01,
            3.91964519e-01,
            3.94565181e-01,
            3.35777982e-01,
            4.34468414e-01,
            4.34228563e-01,
            4.55406870e-01,
            6.28887904e-01,
            6.28342309e-01,
            7.46633419e-01,
            7.66892682e-01,
            7.07245311e-01,
            6.48177114e-01,
            4.44611893e-01,
            5.51623941e-01,
            7.26412461e-01,
            6.13676906e-01,
            6.79542586e-02,
            8.16807490e-02,
            1.32899393e-01,
            1.91507017e-01,
            1.90696482e-01,
            2.00147063e-01,
            2.73266787e-01,
            2.51203348e-01,
            2.91641304e-01,
            3.02340215e-01,
            2.90033553e-01,
            3.56812708e-01,
            3.80332636e-01,
            4.71988270e-01,
            5.71053105e-01,
            5.76061366e-01,
            7.42794124e-01,
            8.28076940e-01,
            8.61271616e-01,
            9.34415109e-01,
            9.88661829e-01,
            1.29302949e00,
            1.68370088e00,
            1.60985763e00,
            1.66388597e00,
            2.18810117e00,
            1.77063413e00,
            2.22234386e00,
            1.79544513e00,
            6.49211052e-01,
            1.12905733e-01,
            1.35219749e-01,
            1.77552881e-01,
            2.33864266e-01,
            2.76136407e-01,
            3.08371345e-01,
            4.22577865e-01,
            4.50832291e-01,
            4.07343365e-01,
            4.54518985e-01,
            4.74195250e-01,
            5.14916496e-01,
            5.82809637e-01,
            6.85511764e-01,
            7.85862983e-01,
            9.18192559e-01,
            1.08807514e00,
            1.32820958e00,
            1.63915706e00,
            1.88506672e00,
            2.11140637e00,
            2.56819078e00,
            3.47029067e00,
            4.43909591e00,
            4.59933654e00,
            5.20503438e00,
            4.63311775e00,
            4.98549453e00,
            6.05139362e00,
            2.00813681e00,
            3.17399571e-01,
            4.80405496e-01,
            6.33070146e-01,
            7.01504333e-01,
            8.78360578e-01,
            1.04252778e00,
            1.33420246e00,
            1.44414774e00,
            1.60301216e00,
            1.95838326e00,
            1.97299122e00,
            2.01505983e00,
            2.48201305e00,
            3.35207178e00,
            4.50221954e00,
            1.02154423e-01,
            5.83456121e00,
            6.21937385e00,
            6.72302208e00,
            6.93572009e00,
            7.72672143e00,
            9.53759783e00,
            9.70607794e00,
            9.88128478e00,
            1.02574353e01,
            1.17366859e01,
            9.75250128e00,
            8.49536317e00,
            5.87634647e00,
            6.90542536e-01,
            8.84953809e-01,
            1.10143838e00,
            1.32548040e00,
            1.39920693e00,
            2.64741690e-01,
            1.49174256e00,
            1.42851071e00,
            1.61623263e00,
            2.14723132e00,
            2.49236663e00,
            2.41236131e00,
            2.52993530e00,
            1.95052864e00,
            2.08077797e00,
            2.46425871e00,
            1.86427999e00,
            1.29883560e00,
            1.61806660e00,
            2.69349944e00,
            5.26651344e00,
            8.60076710e00,
            1.23955411e01,
            1.55537653e01,
            1.57520786e01,
            1.55318570e01,
            1.63010277e01,
            1.95997146e01,
            1.89657798e01,
            1.98173958e01,
            1.28444056e01,
            1.05663513e00,
            1.73837417e00,
            2.38571066e00,
            3.12509262e00,
            5.16370343e00,
            6.27279615e00,
            4.55271819e00,
            2.30736012e00,
            1.00261293e00,
            1.28871366e00,
            6.82622230e00,
            1.52316196e01,
            1.30645368e01,
            1.56890352e01,
            1.39606414e01,
            1.52718010e01,
            7.30423998e00,
            1.86593830e01,
            2.01944545e01,
            2.18768013e01,
            2.09667009e01,
            2.15890054e01,
            2.39164749e01,
            2.48425545e01,
            2.30255779e01,
            1.71761298e01,
            2.33330662e01,
            2.32725960e01,
            2.10340416e01,
            5.24993968e-01,
            1.63131206e00,
            3.44781069e00,
            2.29974095e00,
            4.99462286e00,
            2.32302429e00,
            4.96744300e00,
            2.68405786e00,
            8.62683761e00,
            1.15968873e01,
            1.43637056e01,
            1.16110817e01,
            9.31426757e00,
            1.07818775e01,
            1.02543508e01,
            7.20074507e00,
            1.01373496e01,
            1.66319551e01,
            5.87900394e00,
            1.78322017e01,
            6.29817365e00,
            9.87433101e-01,
            8.83113064e00,
            6.72258056e00,
            7.85860449e00,
            9.53416250e00,
            2.59286607e01,
            2.66550560e01,
            2.05970702e01,
            2.45164563e00,
            1.38458228e00,
        ]
    )

    # formfactor to adc-signal
    adc_sig = ff_spectrometer**2 * (charge * 1e9) ** 2 * spec_response  # in V
    # plt.figure('ADC Signal')
    # plt.plot(adc_sig)
    # add_noise
    elec_noise = 1.2e-3  # V
    elec_noise = elec_noise / np.sqrt(n_shots)
    adc_noise = np.random.randn(np.size(ff_spectrometer)) * elec_noise
    adc_total = adc_sig + adc_noise

    # And back to formfactor
    final_ff = (
        1
        / (charge * 1e9)
        * np.sqrt(np.abs(adc_total) / spec_response)
        * np.sign(adc_total)
    )
    # noise on form factor
    ff_noise = (
        0.5 * final_ff * elec_noise * np.sqrt(n_shots) / adc_total
    )  # fehlerfortpflanzung
    det_lim = (
        1 / (charge * 1e9) * np.sqrt(np.abs(elec_noise) / spec_response)
    )  # noise floor
    # plt.figure()
    # plt.plot(freqs_spectrometer*1e-12, spec_response, 'o')
    # plt.xscale('log')
    # plt.yscale('log')

    # plt.figure('Spectrometer Signal')
    # plt.plot(freqs_spectrometer*1e-12, final_ff, 'o')
    # plt.xscale('log')
    # plt.yscale('log')
    if which_set == "low":
        freqs_to_return = freqs_spectrometer[:120]
        ff_to_return = final_ff[:120]
        det_lim = det_lim[:120]
        ff_noise = ff_noise[:120]
    elif which_set == "high":
        freqs_to_return = freqs_spectrometer[120:]
        ff_to_return = final_ff[120:]
        det_lim = det_lim[120:]
        ff_noise = ff_noise[120:]
    elif which_set == "both":
        freqs_to_return = freqs_spectrometer
        ff_to_return = final_ff
        det_lim = det_lim
        ff_noise = ff_noise
    else:
        print("Keyword not known!")

    return np.array([freqs_to_return, ff_to_return, ff_noise, det_lim])
